1
00:00:00,000 --> 00:00:04,804
>> Will Sentance: Đây là phần cứng của JavaScript.

2
00:00:04,804 --> 00:00:09,546
Những nền tảng chúng ta phải hiểu để có được Phần cứng

3
00:00:09,546 --> 00:00:14,064
đôi khi sẽ cảm thấy một chút nhỏ nhặt, một chút tầm thường.

4
00:00:14,064 --> 00:00:18,419
Tôi hy vọng bạn đã từng đến Hard Parts trước đây, bạn thậm chí sẽ cảm thấy, giữ chặt,

5
00:00:18,419 --> 00:00:20,049
Tôi đã thấy những thứ này trước đây.

6
00:00:20,049 --> 00:00:23,865
Khoảng 30 phút đầu tiên của chúng tôi sẽ là tài liệu,

7
00:00:23,865 --> 00:00:27,477
nếu bạn đã đến Hard Parts trước đây, bạn sẽ nhận ra.

8
00:00:27,477 --> 00:00:31,644
Vì đó là công cụ JavaScript và cách nó hoạt động,

9
00:00:31,644 --> 00:00:36,441
nó phổ biến, nhưng chúng ta phải đặt ra những nền tảng này.

10
00:00:36,441 --> 00:00:38,629
Và bằng cách bạn sẽ thấy mã nơi bạn sẽ đến,

11
00:00:38,629 --> 00:00:39,200
vâng, cảm ơn.

12
00:00:39,200 --> 00:00:41,570
Tôi hiểu mã này đang chạy như thế nào, tôi hiểu nó đang làm gì.

13
00:00:41,570 --> 00:00:43,030
Nhưng chúng ta sẽ thấy nó,

14
00:00:43,030 --> 00:00:47,985
và nó sẽ trao quyền cho chúng tôi sau đó giải quyết tất cả các phần khó khăn sắp tới.

15
00:00:47,985 --> 00:00:49,389
Được rồi.

16
00:00:52,050 --> 00:00:53,820
>> Will Sentance: Đi thôi, đây rồi.

17
00:00:54,860 --> 00:00:59,402
Chúng tôi sẽ viết bảng trắng thông qua tất cả quá trình thực thi mã của chúng tôi giống như

18
00:00:59,402 --> 00:01:01,524
công cụ JavaScript chạy nó.

19
00:01:01,524 --> 00:01:05,716
Chúng tôi làm điều đó, không thể có lỗ hổng trong hiểu biết của chúng tôi.

20
00:01:05,716 --> 00:01:08,204
Chúng tôi sẽ từng bước một, và

21
00:01:08,204 --> 00:01:11,376
chúng tôi sẽ lập bản đồ nó trên bảng trắng toàn bộ thời gian.

22
00:01:11,376 --> 00:01:15,973
Vì vậy, với suy nghĩ đó, điều gì sẽ xảy ra khi JavaScript thực thi, chạy mã của tôi?

23
00:01:15,973 --> 00:01:18,164
Có hai nửa, và tôi sẽ nói ngay với bạn.

24
00:01:18,164 --> 00:01:22,590
Có hai nửa của quá trình thực thi mã.

25
00:01:22,590 --> 00:01:29,330
Một là khả năng đi qua từng dòng mã theo nghĩa đen.

26
00:01:29,330 --> 00:01:32,490
Đó được gọi là luồng thực thi.

27
00:01:32,490 --> 00:01:37,500
Và tất cả những điều đó là khả năng xử lý ở dòng một, hãy làm điều đó,

28
00:01:37,500 --> 00:01:38,550
bất cứ điều gì nó nói để làm.

29
00:01:38,550 --> 00:01:40,980
Lấy dòng hai, làm điều đó, bất cứ điều gì nó nói phải làm.

30
00:01:40,980 --> 00:01:42,536
Đi dòng ba, làm điều đó, bất cứ điều gì nó nói.

31
00:01:42,536 --> 00:01:45,507
Nó đang thực thi, viết mã, blah, blah và

32
00:01:45,507 --> 00:01:47,693
nó phân luồng theo cách của nó xuống mã của chúng tôi.

33
00:01:47,693 --> 00:01:51,232
Nhân tiện, theo thứ tự, từ trên xuống dưới.

34
00:01:51,232 --> 00:01:56,671
Đồng thời, phần khác cần thiết để chạy mã của chúng tôi là một nơi

35
00:01:56,671 --> 00:02:02,557
để lưu trữ các bit dữ liệu mà chúng tôi thông báo khi chúng tôi thực hiện mã của chúng tôi.

36
00:02:02,557 --> 00:02:05,222
Vì vậy, bạn có thể thấy ở dòng một, chúng tôi đang thông báo,

37
00:02:05,222 --> 00:02:08,630
sau đó chúng tôi sẽ lưu trữ num làm nhãn cho một số dữ liệu ba.

38
00:02:08,630 --> 00:02:11,030
Và vì vậy chúng tôi sẽ lập bản đồ những thứ này trên bảng trắng,

39
00:02:11,030 --> 00:02:14,500
đó sẽ là một trải nghiệm hấp dẫn.

40
00:02:14,500 --> 00:02:19,330
Hãy xem cách nó đi từng dòng một, bắt đầu từ dòng một.

41
00:02:19,330 --> 00:02:21,960
Tôi sẽ gọi cho Paul.

42
00:02:21,960 --> 00:02:24,030
Chúng ta đang làm gì ở đây trong dòng một?

43
00:02:24,030 --> 00:02:25,900
Chúng ta thực sự đang làm gì?

44
00:02:25,900 --> 00:02:30,330
>> Paul: Chúng tôi đang nói rằng phân bổ một số dữ liệu cho toàn cầu

45
00:02:31,510 --> 00:02:36,590
vào một hằng số được gọi là num, và sau đó ném một số nguyên 3 vào đó?

46
00:02:36,590 --> 00:02:39,418
>> Will Sentance: Chà, đó có vẻ là một mô tả rất trực quan.

47
00:02:39,418 --> 00:02:42,672
Vì vậy, chúng tôi đang ở trong trí nhớ của chúng tôi.

48
00:02:42,672 --> 00:02:48,687
Trong bộ nhớ của chúng ta, chúng ta đang khai báo một hằng số.

49
00:02:48,687 --> 00:02:49,531
Chỉ cần nhớ,

50
00:02:49,531 --> 00:02:53,822
điều đó có nghĩa là một phần dữ liệu mà chúng tôi không được phép thay đổi vị trí của nó trong bộ nhớ.

51
00:02:53,822 --> 00:02:58,262
Vì vậy, chúng ta không thể đột ngột thay thế giá trị của num bằng 4.

52
00:02:58,262 --> 00:03:02,042
Nó hiện đã được thiết lập để chạy ứng dụng của chúng tôi,

53
00:03:02,042 --> 00:03:05,017
num được đặt thành giá trị 3, tuyệt vời.

54
00:03:05,017 --> 00:03:08,040
Michelle nói dòng mã tiếp theo của chúng ta ở đây muốn làm gì?

55
00:03:08,040 --> 00:03:12,151
>> Paul: Dòng mã tiếp theo cũng đang tạo ra thứ gì đó trong bộ nhớ

56
00:03:12,151 --> 00:03:14,655
chúng tôi đang gọi- >> Will Sentance: Được rồi mọi người

57
00:03:14,655 --> 00:03:19,520
chúng tôi đang rất chính xác, điều này chính xác [LAUGH] đi tiếp nó được gọi là gì?

58
00:03:19,520 --> 00:03:21,491
Gọi là đa dạng, xuất sắc. Được đặt tên là MultiBy2,

59
00:03:21,491 --> 00:03:25,367
chúng tôi đang khai báo hàm NhânBy2.

60
00:03:25,367 --> 00:03:29,682
Trong JavaScript, các hàm có nghĩa là toàn bộ

61
00:03:29,682 --> 00:03:33,451
chức năng là giá trị được ký kết của chúng tôi.

62
00:03:33,451 --> 00:03:37,802
Cũng giống như số 3 chúng tôi đang lưu trữ trong bộ nhớ, chức năng,

63
00:03:37,802 --> 00:03:40,496
định nghĩa chức năng của MultipleBy2.

64
00:03:40,496 --> 00:03:42,404
Tôi sẽ không viết toàn bộ định nghĩa hàm trên

65
00:03:42,404 --> 00:03:43,362
phía bên phải ở đây.

66
00:03:43,362 --> 00:03:46,818
Thay vào đó, tôi sẽ đại diện cho nó bằng chiếc hộp nhỏ này có chữ f trong.

67
00:03:46,818 --> 00:03:49,595
Điều đó đại diện cho toàn bộ định nghĩa chức năng của tôi.

68
00:03:49,595 --> 00:03:55,411
Nếu tôi làm trong bảng điều khiển của mình, bây giờ hãy ghi lại MultiBy2,

69
00:03:55,411 --> 00:03:58,784
tôi sẽ thấy gì, James?

70
00:03:58,784 --> 00:04:02,510
>> Paul: Bạn sẽ thấy mã nguồn thực sự của hàm.

71
00:04:02,510 --> 00:04:05,370
>> Will Sentance: Đúng vậy. Tôi sẽ thấy chính khối mã

72
00:04:05,370 --> 00:04:07,480
hàm nhânBy2.

73
00:04:07,480 --> 00:04:12,170
Bạn biết đấy, tôi sẽ thấy toàn bộ mọi thứ với mã trong bảng điều khiển của mình.

74
00:04:12,170 --> 00:04:16,195
Đó là những gì chúng tôi muốn nói khi chúng tôi nói khai báo một hàm.

75
00:04:16,195 --> 00:04:20,149
Đôi khi chúng ta nghĩ hoặc chúng ta chỉ nghĩ rằng có một mã hoạt động, không có mã nào trong số đó.

76
00:04:20,149 --> 00:04:24,445
Chức năng từ khóa theo nghĩa đen có nghĩa là lưu vào bộ nhớ,

77
00:04:24,445 --> 00:04:28,303
lưu vào bộ nhớ chức năng cụ thể này.

78
00:04:28,303 --> 00:04:34,114
Được rồi, tuyệt vời, dòng mã thứ ba của chúng ta thực thi những gì, Sean?

79
00:04:34,114 --> 00:04:39,096
>> Sean: Nó hoạt động giống như khai báo hằng đầu tiên của chúng tôi,

80
00:04:39,096 --> 00:04:44,000
chỉ tạo một phần bộ nhớ được gọi là tên, gửi nó đến a-

81
00:04:44,000 --> 00:04:44,550
>> Will Sentance: Tuyệt vời,

82
00:04:44,550 --> 00:04:48,350
Sean, đâu không phải dòng mã thứ ba của chúng ta?

83
00:04:48,350 --> 00:04:48,990
>> Sean: kết quả const.

84
00:04:48,990 --> 00:04:50,340
>> Will Sentance: Đúng, tại sao không?

85
00:04:50,340 --> 00:04:53,560
>> Sean: Bởi vì điều đó vẫn chưa được gọi.

86
00:04:53,560 --> 00:04:57,778
>> Will Sentance: Chính xác, chúng tôi không đi sâu vào nội dung của một hàm cho đến khi,

87
00:04:57,778 --> 00:04:58,284
Sean?

88
00:04:58,284 --> 00:04:59,211
>> Sean: Cho đến khi nó được gọi.

89
00:04:59,211 --> 00:05:00,259
>> Will Sentance: Cho đến khi nó được gọi, xuất sắc.

90
00:05:00,259 --> 00:05:02,003
Được rồi, Sean đang ở đó.

91
00:05:02,003 --> 00:05:06,549
Và dân gian, điều này có vẻ tầm thường sâu sắc.

92
00:05:06,549 --> 00:05:09,017
Được rồi, tôi biết cách lưu trữ nội dung trong bộ nhớ.

93
00:05:09,017 --> 00:05:11,356
Nhưng nền tảng này là thứ chúng ta cần.

94
00:05:11,356 --> 00:05:17,093
Mức độ chính xác này hoàn toàn quan trọng đối với mọi thứ sau đó,

95
00:05:17,093 --> 00:05:21,565
tất cả các cách để xây dựng lại không đồng bộ đang chờ đợi với máy phát điện.

96
00:05:21,565 --> 00:05:24,779
Tất cả cuối cùng phụ thuộc vào những nền tảng này.

97
00:05:24,779 --> 00:05:26,582
Được rồi, xuất sắc.

98
00:05:26,582 --> 00:05:31,158
Vì vậy, ngay sau khi chúng tôi bắt đầu chạy mã của mình, chúng tôi sẽ tìm ra hai thứ.

99
00:05:31,158 --> 00:05:33,860
Một, khả năng xem qua từng dòng mã của chúng tôi.

100
00:05:33,860 --> 00:05:35,439
Đó là quy trình thực hiện của chúng tôi.

101
00:05:35,439 --> 00:05:39,540
Hãy nhớ rằng, xâu chuỗi theo cách của nó và thực thi từng dòng mã.

102
00:05:39,540 --> 00:05:44,287
Và đồng thời, chúng tôi xoay tròn, nó ở ngay đó, chính sách thực thi là bạn mã hóa

103
00:05:44,287 --> 00:05:47,160
từng dòng, một bộ nhớ trực tiếp của các biến với dữ liệu.

104
00:05:47,160 --> 00:05:50,410
Một kho lưu trữ trực tiếp các nhãn với dữ liệu.

105
00:05:50,410 --> 00:05:53,461
Tên vị trí cho đó là một môi trường biến đổi,

106
00:05:53,461 --> 00:05:56,208
chúng ta có thể gọi nó là một môi trường biến đổi.

107
00:05:56,208 --> 00:06:00,661
Hãy coi nó như bản thể, môi trường là những thứ xung quanh tôi.

108
00:06:00,661 --> 00:06:04,021
Đây là những biến xung quanh tôi, môi trường biến đổi.

109
00:06:04,021 --> 00:06:09,015
Bây giờ, hai nửa này cùng nhau đã được biết đến.

110
00:06:09,015 --> 00:06:12,613
Hai nửa này cùng nhau, chủ đề của nó, chúng ta sẽ đi qua.

111
00:06:12,613 --> 00:06:15,435
Chúng tôi không sao chép các dòng trong chủ đề, không có ý nghĩa gì cả.

112
00:06:15,435 --> 00:06:20,513
Nhưng hai nửa này cùng nhau được biết đến như một bối cảnh thực thi.

113
00:06:20,513 --> 00:06:26,785
Bối cảnh là không gian để làm điều gì đó, không gian của bối cảnh mà chúng ta làm điều gì đó

114
00:06:26,785 --> 00:06:32,975
hoặc đó là không gian mà chúng ta thực thi mã của mình, đó là một ngữ cảnh thực thi.

115
00:06:32,975 --> 00:06:37,378
Và đó là công cụ toàn cầu mà chúng tôi sẽ khám phá bất cứ khi nào bạn muốn chạy mã,

116
00:06:37,378 --> 00:06:41,911
bao gồm cả ví dụ: khi chúng tôi muốn thực thi mã bên trong một hàm, chúng tôi

117
00:06:41,911 --> 00:06:46,511
sẽ tạo một ngữ cảnh thực thi cục bộ nhỏ chỉ để chạy mã bên trong

118
00:06:46,511 --> 00:06:51,380
một hàm, chúng tôi gọi đó là hàm cục bộ, chỉ cho nội dung bên trong hàm.

119
00:06:51,380 --> 00:06:57,420
Vì vậy, điều này mặc dù là cho mã tổng thể của chúng tôi, nó được gọi là bối cảnh thực thi toàn cầu.

120
00:06:57,420 --> 00:07:00,752
Tất cả những người phù hợp, chúng ta hãy xem.

121
00:07:00,752 --> 00:07:01,854
Cái gì tiếp theo?

122
00:07:01,854 --> 00:07:07,414
Được rồi, như Sean đã nói đúng, chúng tôi đã không thực hiện, chúng tôi đã không gọi,

123
00:07:07,414 --> 00:07:13,828
chúng tôi đã không gọi ra MultiBy2, vì vậy chúng tôi đã ở trong bối cảnh thực thi nào, Sean?

124
00:07:13,828 --> 00:07:14,399
>> Sean: Toàn cầu.

125
00:07:14,399 --> 00:07:16,577
>> Will Sentance: Toàn cầu, xuất sắc, nhưng

126
00:07:16,577 --> 00:07:21,533
bây giờ chúng ta sẽ thực thi một hàm và xem điều gì sẽ xảy ra.

127
00:07:21,533 --> 00:07:25,790
Vì vậy, chúng tôi đã khai báo số ba, khai báo chức năng MultiBy2.

128
00:07:25,790 --> 00:07:28,821
Dòng mã tiếp theo của chúng ta là gì?

129
00:07:28,821 --> 00:07:30,079
Ông Henderson.

130
00:07:30,079 --> 00:07:30,940
>> Brian Henderson: Vâng.

131
00:07:30,940 --> 00:07:32,225
>> Will Sentance: Dòng mã tiếp theo của chúng ta là gì, Brian?

132
00:07:32,225 --> 00:07:36,270
>> Brian Henderson: Chúng tôi đang tạo một nhãn mới trong bộ nhớ được gọi là đầu ra.

133
00:07:36,270 --> 00:07:39,940
>> Will Sentance: Tuyệt vời, chúng ta đã biết những gì để gán cho nó chưa?

134
00:07:39,940 --> 00:07:41,292
>> Brian Henderson: Nó vẫn chưa được xác định tại thời điểm này.

135
00:07:41,292 --> 00:07:43,107
>> Will Sentance: Rất tốt.

136
00:07:43,107 --> 00:07:45,590
Vì đâu là phía bên tay phải?

137
00:07:45,590 --> 00:07:47,989
Phía bên tay phải có phải là giá trị mà chúng ta có thể lưu trữ không?

138
00:07:47,989 --> 00:07:50,858
>> Brian Henderson: Không, nó đang gọi việc thực hiện-

139
00:07:50,858 --> 00:07:51,402
>> Di chúc: Chính xác,

140
00:07:51,402 --> 00:07:53,399
đó là một lệnh để đi và làm điều gì đó.

141
00:07:53,399 --> 00:07:56,430
Nó thực sự không phải là một giá trị mà chúng ta có thể lưu trữ ở phía bên tay phải.

142
00:07:56,430 --> 00:07:58,870
Đầu ra không có lãi suất trong MultiBy2.

143
00:07:58,870 --> 00:08:00,550
Đó là một lệnh để đi và

144
00:08:00,550 --> 00:08:05,490
chạy một số mã bất cứ điều gì được trả về được gọi là, những gì Brian?

145
00:08:05,490 --> 00:08:09,730
Tên chung cho những gì được trả về ngoài chức năng?

146
00:08:09,730 --> 00:08:11,370
>> Brian Henderson: Giá trị trả về.

147
00:08:11,370 --> 00:08:12,990
>> Will Sentance: Trả lại giá trị, chính xác.

148
00:08:12,990 --> 00:08:15,797
Theo nghĩa đen, giá trị trả về.

149
00:08:15,797 --> 00:08:18,245
Đó là những gì sẽ được chỉ định cho đầu ra.

150
00:08:18,245 --> 00:08:21,252
Được rồi, làm đi.

151
00:08:21,252 --> 00:08:25,272
Vì vậy, đầu ra sẽ là kết quả,

152
00:08:25,272 --> 00:08:32,376
giá trị trả về của việc gọi MultiBy2 với đầu vào là 4.

153
00:08:32,376 --> 00:08:38,720
Vậy là xong, vậy tôi đã nói chúng ta tạo bất cứ khi nào có mã để thực thi?

154
00:08:38,720 --> 00:08:39,930
Ban phước?

155
00:08:39,930 --> 00:08:42,580
>> Ban phước: Nhìn vào bối cảnh hành quyết >> Di chúc: Bối cảnh hành quyết,

156
00:08:42,580 --> 00:08:44,040
Tôi sẽ đại diện cho điều đó.

157
00:08:44,040 --> 00:08:48,425
Đây là hộp lớn hơn với hai phần, tôi sẽ đại diện cho nó bằng một hộp nhỏ

158
00:08:48,425 --> 00:08:50,026
với hai phần, nó đây.

159
00:08:50,026 --> 00:08:54,539
Tôi đang thực hiện điều này một cách từ từ vì chúng thực sự là, trong 10, 15 phút tới,

160
00:08:54,539 --> 00:08:58,311
chúng ta sẽ thấy ba phần thực thi JavaScript đồng bộ.

161
00:08:58,311 --> 00:09:01,617
Nếu chúng ta không hạ được những phần này, thì không có gì khác xảy ra sau đó.

162
00:09:01,617 --> 00:09:05,466
Vì vậy, vào bối cảnh thực thi này, chúng ta đi.

163
00:09:05,466 --> 00:09:09,840
Và cũng giống như toàn cầu của chúng tôi để chạy mã chính, bây giờ chúng tôi sẽ chạy

164
00:09:09,840 --> 00:09:14,633
mã cho chỉ bên trong MultiBy2, chúng tôi sẽ có một bộ nhớ nhỏ chỉ dành cho

165
00:09:14,633 --> 00:09:18,543
mã, chỉ cho những thứ được công bố, được khai báo.

166
00:09:18,543 --> 00:09:22,247
Các biến, hàm và tham số,

167
00:09:22,247 --> 00:09:27,082
và các đối số được khai báo bên trong phần thân của MultiBy2.

168
00:09:27,082 --> 00:09:28,460
Họ chỉ sắp xếp ở đây.

169
00:09:28,460 --> 00:09:32,942
Nhân tiện, khi hàm này thực thi xong,

170
00:09:32,942 --> 00:09:37,226
tất cả những mảnh đó, trừ khi chúng được trả lại,

171
00:09:37,226 --> 00:09:41,823
sẽ tự động bị xóa, rác được thu gom.

172
00:09:41,823 --> 00:09:46,044
Đó là những thứ mà chúng tôi không thể truy cập lại, chúng tôi không thể tham chiếu lại những tên đó, vì vậy

173
00:09:46,044 --> 00:09:46,881
nó là rác.

174
00:09:46,881 --> 00:09:49,133
Đó là bộ nhớ đang bị lãng phí.

175
00:09:49,133 --> 00:09:52,606
Chúng tôi sẽ tự động xóa nó bằng JavaScript, được rồi,

176
00:09:52,606 --> 00:09:56,670
ngoại trừ một điều kiện đặc biệt mà chúng ta sẽ thấy một chút sau.

177
00:09:56,670 --> 00:09:58,890
Vì đó là thứ tôi thích nhất trong JavaScript,

178
00:09:58,890 --> 00:10:01,860
những thời điểm khi tất cả dữ liệu của chúng tôi không nhất thiết phải

179
00:10:01,860 --> 00:10:05,780
bị xóa khi chúng ta thoát khỏi một hàm, khái niệm đẹp nhất trong JavaScript.

180
00:10:05,780 --> 00:10:10,190
Và mặc dù chúng tôi sẽ không xem nó như là tiêu điểm,

181
00:10:10,190 --> 00:10:14,490
tất yếu chúng ta phải đến với nó, trong bán kính của nó.

182
00:10:14,490 --> 00:10:16,310
Được rồi, tốt, vậy chúng ta bắt đầu.

183
00:10:16,310 --> 00:10:18,080
Và điều đầu tiên là gì,

184
00:10:18,080 --> 00:10:23,270
Rick, bên trong bối cảnh thực thi cục bộ mà chúng ta sẽ làm?

185
00:10:23,270 --> 00:10:27,350
>> Rick: Định nghĩa một biến hằng số được gọi là kết quả.

186
00:10:27,350 --> 00:10:30,060
>> Will Sentance: Vậy đó là điều thứ hai của chúng tôi, Rick.

187
00:10:30,060 --> 00:10:32,819
Điều đầu tiên chúng ta đưa vào bộ nhớ cục bộ là gì?

188
00:10:32,819 --> 00:10:34,089
>> Rick: Chức năng.

189
00:10:34,089 --> 00:10:36,016
>> Will Sentance: Không phải là chức năng, Michelle?

190
00:10:36,016 --> 00:10:37,118
>> Michelle: Số đầu vào.

191
00:10:37,118 --> 00:10:41,320
>> Will Sentance: Chính xác, số đầu vào được gọi là tham số của chúng tôi,

192
00:10:41,320 --> 00:10:43,426
ghi nhớ trình giữ chỗ.

193
00:10:43,426 --> 00:10:47,303
Chúng tôi đã xác định một hàm có nghĩa là, chúng tôi sẽ chạy điều này sau.

194
00:10:47,303 --> 00:10:50,397
Khi bạn điều hành tôi, hãy đảm bảo rằng bạn điền vào chỗ trống đó,

195
00:10:50,397 --> 00:10:53,181
trình giữ chỗ đó và đặt số với một đối số.

196
00:10:53,181 --> 00:10:55,165
Tham số là trình giữ chỗ.

197
00:10:55,165 --> 00:10:57,694
Đối số là giá trị thực tế được chuyển vào.

198
00:10:57,694 --> 00:10:59,517
Michelle, lập luận của chúng ta là gì?

199
00:10:59,517 --> 00:11:00,667
>> Michelle: Đối số của chúng tôi là 4.

200
00:11:00,667 --> 00:11:03,048
>> Will Sentance: Tuyệt vời, và kết quả là 8.

201
00:11:03,048 --> 00:11:08,073
Và dòng cuối cùng của phần nội dung của hàm cho biết làm gì, Josh?

202
00:11:08,073 --> 00:11:09,699
>> Josh: Trả lại 8?

203
00:11:09,699 --> 00:11:10,997
>> Will Sentance: Để trả lại 8, tôi thích điều đó.

204
00:11:10,997 --> 00:11:13,291
Trả về giá trị của kết quả, 8.

205
00:11:13,291 --> 00:11:14,684
Nó không trả về kết quả.

206
00:11:14,684 --> 00:11:17,828
Nó trả về giá trị của kết quả, là một số 8.

207
00:11:17,828 --> 00:11:20,797
Tôi không thích nói kết quả trả về, nó có nghĩa là toàn bộ.

208
00:11:20,797 --> 00:11:24,355
Đó là JavaScript xem kết quả trả về và đi, kết quả là gì?

209
00:11:24,355 --> 00:11:25,769
8, được rồi, hoàn hảo.

210
00:11:25,769 --> 00:11:28,762
Trả nó về đâu?

211
00:11:28,762 --> 00:11:30,052
Tên của bạn là gì, dude?

212
00:11:30,052 --> 00:11:30,684
>> Brady: Brady.

213
00:11:30,684 --> 00:11:31,826
>> Will Sentance: Brady, xin lỗi Brady.

214
00:11:31,826 --> 00:11:34,251
Brady, trở về đâu?

215
00:11:34,251 --> 00:11:38,411
>> Brady: Đến đầu ra nhãn.

216
00:11:38,411 --> 00:11:40,646
>> Will Sentance: Nhưng bối cảnh thực thi nào?

217
00:11:40,646 --> 00:11:41,554
>> Brady: Toàn cầu.

218
00:11:41,554 --> 00:11:44,247
>> Will Sentance: Chính xác là trên toàn cầu.

219
00:11:44,247 --> 00:11:48,939
Trả lại 8 vào bối cảnh thực thi chung.

220
00:11:50,190 --> 00:11:52,685
Nơi nó được lưu trữ trong đầu ra, hoàn hảo.

221
00:11:52,685 --> 00:11:57,482
Dân gian, tôi biết điều này có vẻ thủ tục, nhưng tôi biết bạn có thể thấy điều này và

222
00:11:57,482 --> 00:12:02,060
đi yeah, yeah, tôi hiểu rằng sản lượng sẽ là 8, tôi hiểu rồi.

223
00:12:03,180 --> 00:12:05,200
Nhưng chúng ta cần có sự chính xác.

224
00:12:05,200 --> 00:12:08,380
Vì vậy, bây giờ hãy chú ý, nhân tiện,

225
00:12:08,380 --> 00:12:13,890
rằng chúng tôi không được phép chuyển sang dòng tiếp theo trong toàn cầu khai báo đầu ra

226
00:12:13,890 --> 00:12:19,270
cho đến khi chúng tôi hoàn thành việc chạy MultiBy2 với đầu vào là bốn.

227
00:12:19,270 --> 00:12:25,920
Chuỗi thực thi của chúng tôi, khả năng đi qua từng dòng mã.

228
00:12:25,920 --> 00:12:31,281
Khi nào nó đã vào cột nhânBy2, nơi nó đã dành thời gian

229
00:12:31,281 --> 00:12:37,050
lướt qua từng dòng mã, rồi nhấn vào từ khóa nào để thoát?

230
00:12:37,050 --> 00:12:39,700
Từ khóa nào, Mike, nói để thoát?

231
00:12:39,700 --> 00:12:40,757
>> Mike: Trở lại. >> Di chúc: Trở lại, và

232
00:12:40,757 --> 00:12:45,122
nếu không có câu lệnh trả về ở đó, thì dấu ngoặc nhọn đóng ngụ ý

233
00:12:45,122 --> 00:12:47,910
một lợi nhuận ngầm sẽ chèn trở lại cho chúng tôi.

234
00:12:47,910 --> 00:12:50,239
Và ra, sự trở lại.

235
00:12:50,239 --> 00:12:55,144
Nói cách khác, JavaScript, nó có thể làm bao nhiêu việc cùng một lúc?

236
00:12:55,144 --> 00:12:57,581
Một, chủ đề của nó là số ít.

237
00:12:57,581 --> 00:13:01,713
Nó sẽ không tiếp tục xuống mã toàn cầu trong khi chạy đồng thời

238
00:13:01,713 --> 00:13:02,609
nhânBy2.

239
00:13:02,609 --> 00:13:04,949
Nó gần như nói rằng, được rồi, chúng ta hãy tiếp tục đi xuống đây, và

240
00:13:04,949 --> 00:13:06,310
tiếp tục ở đây đồng thời.

241
00:13:06,310 --> 00:13:09,969
Uh-uh, một trong những điều tuyệt vời về JavaScript là nó rất

242
00:13:09,969 --> 00:13:14,702
có thể dự đoán được vì nó luôn luôn là thứ này đến thứ khác theo thứ tự, từ trên xuống dưới.

243
00:13:14,702 --> 00:13:17,606
Ít nhất là trong bản chất đồng bộ cốt lõi của nó.

244
00:13:17,606 --> 00:13:20,923
Tất nhiên chúng ta sẽ thấy khi điều đó không áp dụng.

245
00:13:20,923 --> 00:13:22,133
Vì vậy, JavaScript là đồng bộ.

246
00:13:22,133 --> 00:13:24,844
Theo thứ tự, từ trên xuống dưới và đơn luồng.

247
00:13:24,844 --> 00:13:27,340
Chúng ta không thể đột nhiên làm hai việc cùng một lúc.

248
00:13:27,340 --> 00:13:31,020
Tuyệt vời, vì vậy bây giờ chúng ta quay trở lại bối cảnh thực thi toàn cầu.

249
00:13:31,020 --> 00:13:36,400
Nơi chúng ta gặp phải khai báo đầu ra mới, giá trị đó sẽ là giá trị trả về

250
00:13:36,400 --> 00:13:39,980
của một lệnh gọi hàm khác đến MultipleBy2.

251
00:13:39,980 --> 00:13:42,460
Chúng tôi sẽ tạo bối cảnh thực thi cho nó.

252
00:13:43,610 --> 00:13:48,380
Khi bắt đầu, điều đầu tiên, Rick, trong trí nhớ cục bộ của chúng ta là gì?

253
00:13:51,190 --> 00:13:52,270
>> Rick: Số đầu vào.

254
00:13:52,270 --> 00:13:53,090
>> Will Sentance: Cái nào được gọi là của chúng tôi?

255
00:13:53,090 --> 00:13:56,620
Nhớ tên sang trọng cho một trình giữ chỗ?

256
00:13:56,620 --> 00:13:57,620
>> Rick: Lập luận?

257
00:13:57,620 --> 00:13:59,490
>> Will Sentance: Vì vậy, đó là đối số, đó là?

258
00:14:00,680 --> 00:14:02,170
>> Rick: Thông số. >> Will Sentance: Tham số.

259
00:14:02,170 --> 00:14:04,360
Được rồi, Rick, lập luận của chúng ta là gì?

260
00:14:04,360 --> 00:14:06,272
Bạn đúng khi nói tham số của chúng tôi là số đầu vào.

261
00:14:06,272 --> 00:14:07,459
Lập luận của chúng ta ở đây là gì?

262
00:14:07,459 --> 00:14:08,200
>> Rick: 10.

263
00:14:08,200 --> 00:14:09,655
>> Will Sentance: 10, xuất sắc.

264
00:14:09,655 --> 00:14:15,111
Được rồi, kết quả sẽ là 20.

265
00:14:15,111 --> 00:14:20,539
Và chúng tôi đưa nó trở lại toàn cầu.

266
00:14:20,539 --> 00:14:27,520
20 được trả về hằng số chung, newOutput là 20.

267
00:14:27,520 --> 00:14:33,255
Vì vậy, chuỗi của chúng tôi đã đi vào và lại đi ra ngoài.

268
00:14:35,551 --> 00:14:36,352
>> Will Sentance: Được rồi, nhưng

269
00:14:36,352 --> 00:14:41,460
có một phần cuối cùng cho mô hình JavaScript đồng bộ này.

270
00:14:41,460 --> 00:14:45,340
Chúng ta có tên vị trí trong bộ nhớ, môi trường biến đổi.

271
00:14:45,340 --> 00:14:47,397
Chúng tôi có chuỗi thực thi của mình,

272
00:14:47,397 --> 00:14:50,341
khả năng đi qua từng dòng mã.

273
00:14:50,341 --> 00:14:54,245
Chúng được gọi là bối cảnh thực thi.

274
00:14:54,245 --> 00:14:56,696
Hai thứ chúng ta cần để thực thi mã.

275
00:14:56,696 --> 00:15:01,626
Bối cảnh mà chúng ta cần, bối cảnh của những thứ chúng ta cần để thực thi mã.

276
00:15:01,626 --> 00:15:06,055
Nhưng chúng tôi đã tạo ra một loạt các bối cảnh thực thi này,

277
00:15:06,055 --> 00:15:07,370
đã xóa, đã tạo.

278
00:15:07,370 --> 00:15:09,260
Và sau đó, chúng tôi chạy một chức năng khác bên trong chức năng đó,

279
00:15:09,260 --> 00:15:11,220
đó là một chiếc mini nhỏ khác đang được tạo ra bên trong đó.

280
00:15:12,370 --> 00:15:17,420
Theo dõi những người đó đối với chúng tôi dễ dàng trực quan.

281
00:15:17,420 --> 00:15:19,290
Tôi đã hoàn thành mã hóa MultiBy2.

282
00:15:19,290 --> 00:15:23,690
Tôi thoát ra khỏi nó, và tôi đã trở lại như trước đây khi tôi bắt đầu viết mã MultiBy2.

283
00:15:23,690 --> 00:15:25,099
Chúng ta có thể thấy điều đó một cách trực quan rất dễ dàng.

284
00:15:26,850 --> 00:15:33,460
JavaScript không có khả năng nhìn thấy trực quan giống như trước đây, tôi đã gọi

285
00:15:33,460 --> 00:15:38,380
chức năng này trong toàn cục và tôi đã ở trong hộp lớn khi tôi chuyển nó sang hộp nhỏ.

286
00:15:38,380 --> 00:15:41,170
Khi tôi hoàn thành từ hộp nhỏ, tôi quay trở lại hộp lớn.

287
00:15:41,170 --> 00:15:43,093
JavaScript không có khả năng đó.

288
00:15:43,093 --> 00:15:46,336
Nó cần theo dõi vị trí của nó trong mã ngay bây giờ,

289
00:15:46,336 --> 00:15:49,717
nó ở đâu trước khi nó bắt đầu ở bên trong chức năng này,

290
00:15:49,717 --> 00:15:53,591
nơi nó sẽ quay trở lại khi kết thúc bên trong chức năng này.

291
00:15:53,591 --> 00:15:57,566
Cái gì, đây là một thứ kiến ​​thức, có ai biết dữ liệu gì không,

292
00:15:57,566 --> 00:16:00,874
chúng tôi có thể lưu trữ loại thông tin đó ở bất kỳ định dạng nào.

293
00:16:00,874 --> 00:16:03,924
Nhưng có một cấu trúc đặc biệt đẹp,

294
00:16:03,924 --> 00:16:08,700
cách cấu trúc dữ liệu sẽ lưu trữ thông tin đó rất rõ ràng.

295
00:16:08,700 --> 00:16:11,172
Có ai biết cấu trúc đó có thể là gì không?

296
00:16:11,172 --> 00:16:12,359
>> Michelle: Ngăn xếp.

297
00:16:12,359 --> 00:16:13,640
>> Will Sentance: Nó là một ngăn xếp.

298
00:16:13,640 --> 00:16:15,930
Chính xác, trên thực tế, nó sẽ là một đống cuộc gọi.

299
00:16:15,930 --> 00:16:18,020
Một ngăn xếp là a, chúng ta có các mảng.

300
00:16:18,020 --> 00:16:18,694
Mảng nói,

301
00:16:18,694 --> 00:16:22,622
danh sách dữ liệu mà tôi có thể lấy một phần tử ở bất kỳ vị trí ngẫu nhiên nào.

302
00:16:22,622 --> 00:16:24,913
Điều đó không phản ánh những gì chúng tôi muốn làm ở đây.

303
00:16:24,913 --> 00:16:28,143
Ở đây, chúng tôi muốn nói, giống như một chồng đĩa.

304
00:16:28,143 --> 00:16:33,141
Tôi đặt cái đầu tiên vào, tôi bắt đầu trong bối cảnh thực thi toàn cầu,

305
00:16:33,141 --> 00:16:35,961
đó là phần tử đầu tiên của tôi trong ngăn xếp của tôi.

306
00:16:35,961 --> 00:16:39,519
Và sau đó khi tôi bắt đầu chạy MultiBy2, tôi thêm nó lên trên.

307
00:16:41,130 --> 00:16:42,910
Và điều đó giống như việc thêm đĩa tiếp theo của tôi.

308
00:16:42,910 --> 00:16:45,614
Nếu tôi phải chạy một chức năng khác bên trong đó, tôi sẽ thêm chức năng đó lên trên.

309
00:16:45,614 --> 00:16:48,920
Khi tôi hoàn thành cái đó, tất cả những gì tôi quan tâm là khi tôi cất cái đó đi,

310
00:16:48,920 --> 00:16:50,790
cái trước đã có trước đó vẫn ở đó,

311
00:16:50,790 --> 00:16:53,250
và đó là bản chất của một ngăn xếp.

312
00:16:53,250 --> 00:16:55,910
Đó là khi tôi lấy đi thứ cuối cùng còn sót lại,

313
00:16:55,910 --> 00:16:57,630
Tôi trở lại nơi tôi trước đây.

314
00:16:57,630 --> 00:17:02,010
Và vì vậy một ngăn xếp sẽ là một ngăn xếp các lệnh gọi đến các hàm.

315
00:17:02,010 --> 00:17:09,010
Bắt đầu, đây là ngăn xếp cuộc gọi, ngăn xếp cuộc gọi đến các hàm.

316
00:17:09,010 --> 00:17:12,351
Bắt đầu với loại đại diện của tổng thể của chúng tôi,

317
00:17:12,351 --> 00:17:15,689
hãy nghĩ về toàn bộ cơ sở mã như một hàm được gọi là toàn cục, nhưng

318
00:17:15,689 --> 00:17:19,710
ngay sau khi chúng tôi bắt đầu chạy mã của mình, chúng tôi đang chạy toàn cầu.

319
00:17:19,710 --> 00:17:24,526
Vì vậy, hãy bắt đầu với toàn cầu ngay khi chúng tôi bắt đầu chạy mã của mình.

320
00:17:24,526 --> 00:17:26,408
Khi chúng ta bắt đầu chạy MultiBy2.

321
00:17:28,329 --> 00:17:30,683
>> Will Sentance: Paul, nó có ý nghĩa gì với ngăn xếp cuộc gọi của chúng tôi?

322
00:17:30,683 --> 00:17:32,451
>> Paul: Thêm vào bối cảnh thực thi mới.

323
00:17:32,451 --> 00:17:35,660
>> Will Sentance: Thêm vào ngữ cảnh thực thi mới, chính xác.

324
00:17:35,660 --> 00:17:39,990
Thêm vào lệnh gọi nhânBy2 với đầu vào là 4.

325
00:17:39,990 --> 00:17:47,090
Có nghĩa là khi tôi đang ở trong hàm MultiBy2, chuỗi của tôi

326
00:17:47,090 --> 00:17:52,520
nằm trong hàm MultiBy2 của tôi, MultiBy2 sẽ đứng đầu trong đống lệnh gọi của tôi.

327
00:17:52,520 --> 00:17:55,667
Một quy tắc đơn giản của tôi là, bất kể điều gì ở đầu ngăn xếp cuộc gọi của tôi,

328
00:17:55,667 --> 00:17:57,223
đó là nơi tôi đang ở ngay bây giờ.

329
00:17:57,223 --> 00:18:02,721
Và sau đó, ngay khi tôi trở ra, điều gì sẽ xảy ra, Paul, với ngăn xếp cuộc gọi của tôi?

330
00:18:02,721 --> 00:18:05,428
>> Paul: multipleBy2, bối cảnh thực thi đó biến mất.

331
00:18:05,428 --> 00:18:07,836
Bạn quay trở lại toàn cầu, và sau đó bạn- >> Will Sentance: Tuyệt vời,

332
00:18:07,836 --> 00:18:11,166
Tôi sẽ loại bỏ MultiBy2 khỏi ngăn xếp cuộc gọi của mình.

333
00:18:11,166 --> 00:18:15,516
Và chúng ta có thể biết, do đó quay trở lại bối cảnh thực thi toàn cầu như một đầu ra, nhưng

334
00:18:15,516 --> 00:18:17,140
JavaScript thì không.

335
00:18:17,140 --> 00:18:20,440
JavaScript biết điều đó vì hãy nhìn vào ngăn xếp cuộc gọi của tôi bây giờ?

336
00:18:20,440 --> 00:18:21,280
Đừng hoảng sợ.

337
00:18:21,280 --> 00:18:24,640
Nó toàn cầu và trở lại toàn cầu.

338
00:18:24,640 --> 00:18:28,940
Điều này cho phép JavaScript theo dõi vị trí của nó trong mã của nó,

339
00:18:28,940 --> 00:18:32,940
dòng nào đang chạy và sau đó khi tôi kết thúc trong bối cảnh thực thi hiện tại,

340
00:18:32,940 --> 00:18:34,170
tôi sẽ quay trở lại đâu?

341
00:18:35,360 --> 00:18:36,970
Nó sẽ thoát khỏi vị trí của tôi, và

342
00:18:36,970 --> 00:18:38,658
lớp tiếp theo xuống là nơi tôi quay lại.

343
00:18:38,658 --> 00:18:42,230
Được rồi.

344
00:18:42,230 --> 00:18:43,940
Nhân tiện, tên sang trọng cho

345
00:18:43,940 --> 00:18:48,730
thêm vào một ngăn xếp không phải là thêm, không phải là ném tiếp, là những gì Sean?

346
00:18:50,180 --> 00:18:52,519
Victor? Tên sang trọng để thêm vào ngăn xếp là gì,

347
00:18:52,519 --> 00:18:53,331
có ai biết không

348
00:18:53,331 --> 00:18:54,082
>> Victor: Đẩy đi. >> Will Sentance: Đẩy,

349
00:18:54,082 --> 00:18:58,180
đó là thuật ngữ kỹ thuật khoa học máy tính để thêm vào một ngăn xếp.

350
00:18:58,180 --> 00:19:01,680
Và cái tên sang trọng, Josh, bạn biết đấy, để lấy thứ gì đó ra khỏi ngăn xếp?

351
00:19:01,680 --> 00:19:02,680
>> Josh: Bốp. >> Will Sentance: Pop, chính xác,

352
00:19:02,680 --> 00:19:04,050
đẩy và bật.

353
00:19:04,050 --> 00:19:05,210
Tuyệt vời, được rồi, tốt.

354
00:19:05,210 --> 00:19:07,480
Đúng, chúng tôi đã nói về điều này.

355
00:19:07,480 --> 00:19:10,370
Vì vậy, chúng ta hãy biết những nền tảng cốt lõi này.

356
00:19:10,370 --> 00:19:17,234
Ngón tay cái là một kỹ thuật sư phạm được sử dụng rộng rãi để chỉ ra sự hiểu biết của một người.

357
00:19:17,234 --> 00:19:21,601
Ngươi đánh mất ta, ta rất rõ ràng, ta có câu hỏi làm rõ.

358
00:19:21,601 --> 00:19:24,267
Mọi người đều thích, ngay bây giờ.

359
00:19:24,267 --> 00:19:26,744
Không sao để có lời giải thích rõ ràng.

360
00:19:26,744 --> 00:19:28,825
Không ai?

361
00:19:28,825 --> 00:19:30,741
Rất, rất bực bội.

362
00:19:30,741 --> 00:19:32,460
Được rồi, tốt, tốt.